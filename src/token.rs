#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub enum Token {
    Zero,
    One,
    Two,
    Three,
    Four,
    Five,
    Six,
    Seven,
    Eight,
    Nine,
    Clear,
    LeftBracket,
    RightBracket,
    Modulo,
    Pi,
    Divide,
    SquareRoot,
    Multiply,
    Square,
    Subtract,
    Power,
    Period,
    Percent,
    Add,
    Equal,
}

impl Token {
    pub fn from_button(value: &str) -> Option<Self> {
        match value {
            "0" => Some(Token::Zero),
            "1" => Some(Token::One),
            "2" => Some(Token::Two),
            "3" => Some(Token::Three),
            "4" => Some(Token::Four),
            "5" => Some(Token::Five),
            "6" => Some(Token::Six),
            "7" => Some(Token::Seven),
            "8" => Some(Token::Eight),
            "9" => Some(Token::Nine),
            "C" => Some(Token::Clear),
            "(" => Some(Token::LeftBracket),
            ")" => Some(Token::RightBracket),
            "mod" => Some(Token::Modulo),
            "π" => Some(Token::Pi),
            "÷" => Some(Token::Divide),
            "√" => Some(Token::SquareRoot),
            "×" => Some(Token::Multiply),
            "x²" => Some(Token::Square),
            "-" => Some(Token::Subtract),
            "xʸ" => Some(Token::Power),
            "." => Some(Token::Period),
            "%" => Some(Token::Percent),
            "+" => Some(Token::Add),
            "=" => Some(Token::Equal),
            _ => None,
        }
    }

    pub fn from_keypress(value: &str) -> Option<Self> {
        match value {
            "0" => Some(Token::Zero),
            "1" => Some(Token::One),
            "2" => Some(Token::Two),
            "3" => Some(Token::Three),
            "4" => Some(Token::Four),
            "5" => Some(Token::Five),
            "6" => Some(Token::Six),
            "7" => Some(Token::Seven),
            "8" => Some(Token::Eight),
            "9" => Some(Token::Nine),
            "\x7f" => Some(Token::Clear),
            "(" => Some(Token::LeftBracket),
            ")" => Some(Token::RightBracket),
            "%" => Some(Token::Modulo),
            "/" => Some(Token::Divide),
            "*" => Some(Token::Multiply),
            "-" => Some(Token::Subtract),
            "^" => Some(Token::Power),
            "." => Some(Token::Period),
            "+" => Some(Token::Add),
            "=" => Some(Token::Equal),
            _ => None,
        }
    }
}

impl ToString for Token {
    fn to_string(&self) -> String {
        match self {
            Token::Zero => "0",
            Token::One => "1",
            Token::Two => "2",
            Token::Three => "3",
            Token::Four => "4",
            Token::Five => "5",
            Token::Six => "6",
            Token::Seven => "7",
            Token::Eight => "8",
            Token::Nine => "9",
            Token::Clear => "C",
            Token::LeftBracket => "(",
            Token::RightBracket => ")",
            Token::Modulo => "mod",
            Token::Pi => "π",
            Token::Divide => "÷",
            Token::SquareRoot => "√",
            Token::Multiply => "×",
            Token::Square => "x²",
            Token::Subtract => "-",
            Token::Power => "xʸ",
            Token::Period => ".",
            Token::Percent => "%",
            Token::Add => "+",
            Token::Equal => "=",
        }.into()
    }
}